name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, test ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24.2'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  penetration-testing:
    name: Penetration Testing
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/heads/test')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Build Quiver for testing
      run: make build
      
    - name: Create test config
      run: |
        cat > config.json << EOF
        {
          "server": {
            "host": "127.0.0.1",
            "port": 8080,
            "readTimeout": 30,
            "writeTimeout": 30
          },
          "database": {
            "type": "json",
            "connectionString": "./test_data.json"
          },
          "logging": {
            "level": "info",
            "file": "./logs/test.log"
          }
        }
        EOF
        
    - name: Start Quiver server in background
      run: |
        mkdir -p logs
        ./bin/quiver server --config config.json &
        echo $! > quiver.pid
        sleep 10
        
    - name: Verify server is running
      run: |
        curl -f http://127.0.0.1:8080/health || exit 1
        echo "Quiver server is running successfully"
    
    - name: Install security testing tools
      run: |
        # Install OWASP ZAP
        wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2_14_0_unix.sh
        chmod +x ZAP_2_14_0_unix.sh
        sudo ./ZAP_2_14_0_unix.sh -q
        
        # Install Nuclei
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget -q https://github.com/projectdiscovery/nuclei/releases/download/v3.1.0/nuclei_3.1.0_linux_amd64.zip
        unzip nuclei_3.1.0_linux_amd64.zip
        sudo mv nuclei /usr/local/bin/
        
        # Install Nikto
        sudo apt-get install -y nikto
        
        # Install HTTPie for API testing
        sudo apt-get install -y httpie
        
    - name: Update Nuclei templates
      run: nuclei -update-templates
    
    - name: Run OWASP ZAP Baseline Scan
      run: |
        mkdir -p security-reports
        /opt/zaproxy/zap.sh -cmd -quickurl http://127.0.0.1:8080 -quickprogress -quickout security-reports/zap-baseline-report.html
        /opt/zaproxy/zap.sh -cmd -quickurl http://127.0.0.1:8080/api/v1 -quickprogress -quickout security-reports/zap-api-report.html
        
    - name: Run OWASP ZAP Full Scan
      run: |
        /opt/zaproxy/zap.sh -cmd -quickurl http://127.0.0.1:8080 -quickattackurl http://127.0.0.1:8080 -quickprogress -quickout security-reports/zap-full-scan.html
        
    - name: Run Nuclei Vulnerability Scan
      run: |
        nuclei -target http://127.0.0.1:8080 -o security-reports/nuclei-report.txt -severity critical,high,medium
        nuclei -target http://127.0.0.1:8080/api/v1 -o security-reports/nuclei-api-report.txt -severity critical,high,medium
        
    - name: Run Nikto Web Scanner
      run: |
        nikto -h http://127.0.0.1:8080 -Format txt -output security-reports/nikto-report.txt
        
    - name: Test API Authentication & Authorization
      run: |
        echo "Testing API endpoints for security issues..." > security-reports/api-security-test.txt
        
        # Test health endpoints
        echo "=== Health Endpoints ===" >> security-reports/api-security-test.txt
        http GET 127.0.0.1:8080/health >> security-reports/api-security-test.txt 2>&1 || true
        http GET 127.0.0.1:8080/ready >> security-reports/api-security-test.txt 2>&1 || true
        http GET 127.0.0.1:8080/live >> security-reports/api-security-test.txt 2>&1 || true
        
        # Test API v1 endpoints
        echo "=== API v1 Endpoints ===" >> security-reports/api-security-test.txt
        http GET 127.0.0.1:8080/api/v1/server/info >> security-reports/api-security-test.txt 2>&1 || true
        http GET 127.0.0.1:8080/api/v1/server/status >> security-reports/api-security-test.txt 2>&1 || true
        http GET 127.0.0.1:8080/api/v1/packages/ >> security-reports/api-security-test.txt 2>&1 || true
        http GET 127.0.0.1:8080/api/v1/repositories/ >> security-reports/api-security-test.txt 2>&1 || true
        
        # Test for common vulnerabilities
        echo "=== Security Tests ===" >> security-reports/api-security-test.txt
        
        # Test SQL injection attempts
        http GET "127.0.0.1:8080/api/v1/arrows/search?q='; DROP TABLE test; --" >> security-reports/api-security-test.txt 2>&1 || true
        
        # Test XSS attempts
        http GET "127.0.0.1:8080/api/v1/arrows/search?q=<script>alert('xss')</script>" >> security-reports/api-security-test.txt 2>&1 || true
        
        # Test path traversal
        http GET "127.0.0.1:8080/api/v1/packages/../../../etc/passwd" >> security-reports/api-security-test.txt 2>&1 || true
        
        # Test unauthorized POST requests
        http POST 127.0.0.1:8080/api/v1/arrows/test/install >> security-reports/api-security-test.txt 2>&1 || true
        http POST 127.0.0.1:8080/api/v1/netbridge/open port:=22 protocol:=tcp >> security-reports/api-security-test.txt 2>&1 || true
        
    - name: Run SSL/TLS Security Check
      run: |
        echo "=== SSL/TLS Security Analysis ===" > security-reports/ssl-analysis.txt
        # Test for weak ciphers and protocols (if HTTPS was enabled)
        echo "Note: Server running on HTTP, SSL/TLS testing skipped" >> security-reports/ssl-analysis.txt
        
    - name: Test for Information Disclosure
      run: |
        echo "=== Information Disclosure Tests ===" > security-reports/info-disclosure.txt
        
        # Check for verbose error messages
        http GET 127.0.0.1:8080/api/v1/nonexistent >> security-reports/info-disclosure.txt 2>&1 || true
        
        # Check server headers for information leakage
        curl -I http://127.0.0.1:8080 >> security-reports/info-disclosure.txt 2>&1 || true
        
        # Test for directory traversal in static files
        http GET 127.0.0.1:8080/../../../etc/passwd >> security-reports/info-disclosure.txt 2>&1 || true
        
    - name: Generate Security Summary Report
      run: |
        cat > security-reports/security-summary.md << 'EOF'
        # Quiver API Security Testing Report
        
        ## Scan Summary
        - **Date**: $(date)
        - **Target**: http://127.0.0.1:8080
        - **Tools Used**: OWASP ZAP, Nuclei, Nikto
        
        ## Tests Performed
        1. **OWASP ZAP Baseline Scan** - Basic vulnerability detection
        2. **OWASP ZAP Full Scan** - Comprehensive security testing
        3. **Nuclei Scan** - Modern vulnerability templates
        4. **Nikto Scan** - Web server security assessment
        5. **Manual API Security Tests** - Custom endpoint testing
        6. **Information Disclosure Tests** - Data leakage detection
        
        ## API Endpoints Tested
        - Health endpoints: /health, /ready, /live
        - Server info: /api/v1/server/*
        - Package management: /api/v1/packages/*
        - Arrow management: /api/v1/arrows/*
        - Repository management: /api/v1/repositories/*
        - Network bridge: /api/v1/netbridge/*
        
        ## Report Files
        - `zap-baseline-report.html` - ZAP baseline scan results
        - `zap-full-scan.html` - ZAP comprehensive scan results
        - `nuclei-report.txt` - Nuclei vulnerability findings
        - `nikto-report.txt` - Nikto web server assessment
        - `api-security-test.txt` - Manual API security tests
        - `info-disclosure.txt` - Information disclosure tests
        
        ## Next Steps
        Review all report files for security findings and remediate any identified vulnerabilities.
        EOF
        
    - name: Stop Quiver server
      run: |
        if [ -f quiver.pid ]; then
          kill $(cat quiver.pid) || true
          rm quiver.pid
        fi
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-testing-reports
        path: security-reports/
        retention-days: 30
        
    - name: Check for critical vulnerabilities
      run: |
        # Fail the build if critical vulnerabilities are found
        if grep -i "critical\|high" security-reports/nuclei-report.txt; then
          echo "Critical or high severity vulnerabilities found!"
          echo "Please review the security reports and fix issues before merging."
          exit 1
        fi
        
        # Check ZAP reports for high-risk findings
        if grep -i "high\|critical" security-reports/zap-*.html; then
          echo "High-risk vulnerabilities found in ZAP scan!"
          echo "Please review the security reports and fix issues before merging."
          exit 1
        fi
        
        echo "No critical vulnerabilities detected in automated scans."

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p bin
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags "-X main.version=${{ github.ref_name }}" -o bin/quiver-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/quiver
        else
          go build -ldflags "-X main.version=${{ github.ref_name }}" -o bin/quiver-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/quiver
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: quiver-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: rabbytesoftware/quiver
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Create release packages
      run: |
        mkdir -p release
        cd artifacts
        for dir in */; do
          if [[ $dir == *"windows"* ]]; then
            cd "$dir" && zip -r "../../release/quiver-${dir%/}.zip" . && cd ..
          else
            cd "$dir" && tar -czf "../../release/quiver-${dir%/}.tar.gz" . && cd ..
          fi
        done
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 