# Project Rules for Quiver

## Build and Compilation
- This project MUST be compiled using the Makefile
- Use `make build` for building the project
- Use `make run` for running the project
- Do NOT suggest alternative build methods - always refer to the Makefile

## Code Organization and Structure
- Separate concerns into different files and packages
- Avoid creating large code files (>500 lines should be considered for refactoring)
- If a file becomes too large, split functionality into:
  - Separate files within the same package
  - New packages in appropriate directories (internal/, pkgs/, cmd/)
- Follow Go project layout standards:
  - `cmd/` for main applications
  - `internal/` for private application code
  - `pkgs/` for public library code
  - Keep functions focused and single-purpose

## Documentation
- ALL markdown documentation files MUST go in the `./docs/` folder
- Do NOT create markdown files in the root directory
- Use clear, descriptive filenames for documentation
- Update existing documentation rather than creating duplicates

## Go-Specific Best Practices
- Follow Go naming conventions (camelCase for private, PascalCase for public)
- Use meaningful package names that describe functionality
- Keep interfaces small and focused
- Handle errors appropriately - don't ignore them
- Use context.Context for cancelable operations
- Write tests alongside code (use _test.go suffix)

## File and Directory Management
- Respect the existing project structure
- Create new directories only when necessary for logical separation
- Use descriptive names for files and directories
- Keep related functionality together in the same package when appropriate

## Dependencies and Modules
- Use go.mod for dependency management
- Keep dependencies minimal and well-justified
- Update go.sum when adding/removing dependencies via go.mod

## Configuration
- Use the existing config.json structure for configuration
- Follow the pattern established in config.example.json
- Document configuration changes in ./docs/ if needed 